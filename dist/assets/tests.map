{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","emb-app/tests/integration/components/postlist/component-test.js","emb-app/tests/lint/app.lint-test.js","emb-app/tests/lint/templates.template.lint-test.js","emb-app/tests/lint/tests.lint-test.js","emb-app/tests/test-helper.js","emb-app/tests/unit/models/model-test.js","emb-app/tests/unit/posts/route-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"emb-app/tests/integration/components/postlist/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | postlist', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vPsd5jpZ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[21,\\\"postlist\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ZAiO7/jW\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"postlist\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"emb-app/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('adapters/post.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/post.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/post.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/post.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/products.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/products.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pods/application/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pods/components/product-info/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/product-info/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pods/components/product-info/product-list/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/product-info/product-list/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pods/components/product-info/product-view/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/components/product-info/product-view/component.js should pass ESLint\\n\\n3:8 - \\'EmberObject\\' is defined but never used. (no-unused-vars)');\n  });\n  QUnit.test('pods/products/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/products/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('serializers/post.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/post.js should pass ESLint\\n\\n');\n  });\n});","define(\"emb-app/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('emb-app/pods/application/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'emb-app/pods/application/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('emb-app/pods/components/product-info/product-list/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'emb-app/pods/components/product-info/product-list/template.hbs should pass TemplateLint.\\n\\nemb-app/pods/components/product-info/product-list/template.hbs\\n  3:2  error  Incorrect indentation for `<tr>` beginning at L3:C2. Expected `<tr>` to be at an indentation of 4 but was found at 2.  block-indentation\\n  14:2  error  Incorrect indentation for `{{#each}}` beginning at L14:C2. Expected `{{#each}}` to be at an indentation of 4 but was found at 2.  block-indentation\\n  21:72  error  Incorrect indentation for `td` beginning at L18:C6. Expected `</td>` ending at L21:C72 to be at an indentation of 6 but was found at 67.  block-indentation\\n  18:10  error  Incorrect indentation for `<input>` beginning at L18:C10. Expected `<input>` to be at an indentation of 8 but was found at 10.  block-indentation\\n  30:41  error  Incorrect indentation for `Delete\\n          ` beginning at L30:C41. Expected `Delete\\n          ` to be at an indentation of 12 but was found at 41.  block-indentation\\n  19:34  error  you must use double quotes in templates  quotes\\n  19:61  error  you must use double quotes in templates  quotes\\n  28:35  error  you must use double quotes in templates  quotes\\n  29:35  error  you must use double quotes in templates  quotes\\n  29:53  error  you must use double quotes in templates  quotes\\n');\n  });\n  QUnit.test('emb-app/pods/components/product-info/product-view/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'emb-app/pods/components/product-info/product-view/template.hbs should pass TemplateLint.\\n\\nemb-app/pods/components/product-info/product-view/template.hbs\\n  1:0  error  Tables must have a table group (thead, tbody or tfoot).  table-groups\\n');\n  });\n  QUnit.test('emb-app/pods/components/product-info/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'emb-app/pods/components/product-info/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('emb-app/pods/products/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'emb-app/pods/products/template.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"emb-app/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('integration/components/postlist/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/postlist/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/model-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/posts/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/posts/route-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"emb-app/tests/test-helper\", [\"emb-app/app\", \"emb-app/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"emb-app/tests/unit/models/model-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | post', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('post', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"emb-app/tests/unit/posts/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | posts', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:posts');\n      assert.ok(route);\n    });\n  });\n});","define('emb-app/config/environment', [], function() {\n  var prefix = 'emb-app';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('emb-app/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}